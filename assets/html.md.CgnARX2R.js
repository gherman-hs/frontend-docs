import{_ as i,c as l,o,ae as a}from"./chunks/framework.Cthp9TdA.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"html.md","filePath":"html.md"}'),t={name:"html.md"};function d(c,e,r,n,u,h){return o(),l("div",null,e[0]||(e[0]=[a('<h2 id="html" tabindex="-1">HTML <a class="header-anchor" href="#html" aria-label="Permalink to &quot;HTML&quot;">​</a></h2><ul><li>Избегать «div hell» — вложенность <code>&lt;div&gt;&lt;div&gt;&lt;div&gt;</code> не больше 2–3 уровней</li><li>Использовать семантические теги: <code>&lt;section&gt;</code>, <code>&lt;nav&gt;</code>, <code>&lt;main&gt;</code>, <code>&lt;footer&gt;</code></li><li>У изображений всегда должны быть width и height — предотвращает reflow</li><li>У изображений используется loading=&quot;lazy&quot; (если они не на первом экране)</li><li>Избегать ngStyle с background-image — использовать <code>&lt;img [src/ngSrc]&gt;</code> с object-fit/fill</li><li>Присутствует &#39;loading=&quot;lazy&quot;&#39; для изображений</li></ul><h2 id="css-scss" tabindex="-1">CSS / SCSS <a class="header-anchor" href="#css-scss" aria-label="Permalink to &quot;CSS / SCSS&quot;">​</a></h2><ul><li>Нет глубоких селекторов <code>.a .b .c .d {}</code> – максимум 2-3 уровня вложенности (Вложенность селекторов не глубже 2–3 уровней)</li><li>Не использовать absolute / float, если можно через flex, grid, relative</li><li>Использовать <code>gap</code>/<code>margin</code> вместо <code>space-x-*</code> в Tailwind</li><li>Избегать <code>!important</code> (ставить только в исключениях)</li><li>Переиспользуемые стили вынесены в <code>@mixin</code></li><li>Используются SCSS-функции для единиц измерения (<code>rem()</code>, <code>size()</code> и т.д.)</li><li>Все анимации — через transition-[prop], а не transition-all</li></ul><h2 id="используи-rem" tabindex="-1">Используй rem <a class="header-anchor" href="#используи-rem" aria-label="Permalink to &quot;Используй rem&quot;">​</a></h2><p>Переводи в rem все, кроме изображений и узко специфичных кейсов, а именно:</p><ul><li><code>font-size</code>, <code>line-height</code></li><li><code>padding</code>, <code>margin</code>, <code>gap</code>, <code>row-gap</code>, <code>column-gap</code></li><li>width, height, min-<em>, max-</em></li><li>top, left, right, bottom</li><li>border-radius (кроме full)</li></ul><h2 id="тяжелые-своиства" tabindex="-1">Тяжёлые свойства <a class="header-anchor" href="#тяжелые-своиства" aria-label="Permalink to &quot;Тяжёлые свойства&quot;">​</a></h2><p>Избегаем, если есть альтернатива:</p><ul><li>Нет <code>box-shadow</code> с большим размытием (<code>более 20px</code>)</li><li>Нет <code>filter: blur()</code>, <code>backdrop-filter</code></li><li>Нет <code>transform: scale()</code> без нужды</li><li><code>border-radius</code> не больше <code>8px</code> по возможности, если это не аватарка или круг</li><li><code>opacity</code> не используется отдельно в анимациях (лучше <code>visibility + opacity</code>)</li><li>overflow: auto всегда с max-height или max-width — иначе может быть баг с ререндером</li></ul><h2 id="изображения" tabindex="-1">Изображения <a class="header-anchor" href="#изображения" aria-label="Permalink to &quot;Изображения&quot;">​</a></h2><ul><li>Использовать .webp, .avif по возможности (для всех не svg)</li><li>Используется <code>&lt;img/&gt;</code> вместо <code>background-image</code> где возможно</li><li><code>object-fit: cover</code> используется только с <code>aspect-[x/y]</code></li></ul><p>Когда ставить decoding=&quot;async&quot;:</p><ul><li>много изображений на странице</li><li>не критичны для первого рендера (не влияют на первый видимый экран)</li><li>не на первом экране</li><li>улучшить показатели Lighthouse + повысить метрики TTI и LCP</li></ul><p>Когда можно не ставить:</p><ul><li>изображение одиночное и находится на первом экране (critical path)</li><li>используется NgOptimizedImage с атрибутом priority, и картинка важна для первого отображения страницы</li></ul><h2 id="запрещенное-в-псевдоэлементах" tabindex="-1">Запрещённое в псевдоэлементах: <a class="header-anchor" href="#запрещенное-в-псевдоэлементах" aria-label="Permalink to &quot;Запрещённое в псевдоэлементах:&quot;">​</a></h2><ul><li>Нет <code>background-image</code> в <code>::before</code> / <code>::after</code></li><li>Нет <code>animation, box-shadow, backdrop-filter</code> в <code>::before</code> / <code>::after</code>, если можно обойтись</li><li>Нет <code>absolute</code> в <code>::before</code> / <code>::after</code>, если можно обойтись без этого</li></ul><h2 id="tailwind" tabindex="-1">Tailwind <a class="header-anchor" href="#tailwind" aria-label="Permalink to &quot;Tailwind&quot;">​</a></h2><ul><li>Порядок классов: layout → spacing → text → misc</li><li>Используется <code>container</code> + <code>max-w-screen-xl</code> для оберток</li><li>Не используются кастомные классы, которые повторяют tailwind-классы</li></ul><h2 id="dev-friendly-практики" tabindex="-1">dev-friendly практики <a class="header-anchor" href="#dev-friendly-практики" aria-label="Permalink to &quot;dev-friendly практики&quot;">​</a></h2><ul><li>Все стили переиспользуемы: миксины, функции, компоненты</li><li>У каждого компонента свой SCSS-файл (component-name.component.scss)</li><li>Внутри компонента разрешено @import локальных mixins / функций</li><li>Без глобального захламления</li></ul><h2 id="основные-правила" tabindex="-1">Основные правила <a class="header-anchor" href="#основные-правила" aria-label="Permalink to &quot;Основные правила&quot;">​</a></h2><ul><li>В attr Angular нельзя передавать объекты — только строки (иначе будет [object Object])</li><li>ngClass, ngStyle — избегать функций и тернаров, используй attr</li><li>Закрывай тег <code>&lt;img ... /&gt;</code> правильно <code>/&gt;</code></li><li>избегать :nth-child() (сложный ререндер, специфичность)</li><li>Избегай &#39;background-image&#39; в ngStyle, используй <code>&lt;img&gt;</code></li></ul><h2 id="button" tabindex="-1"><code>&lt;button&gt;</code> <a class="header-anchor" href="#button" aria-label="Permalink to &quot;`&lt;button&gt;`&quot;">​</a></h2><p>Поддерживает атрибут:</p><ul><li><p>type=&quot;button&quot; — по умолчанию (действие без формы)</p></li><li><p>type=&quot;submit&quot; — отправка формы</p></li><li><p>type=&quot;reset&quot; — сброс формы</p></li><li><p>Рекомендуется использовать для любых действий, не связанных с переходом по URL</p></li><li><p>Всегда явно указывай type — иначе submit по умолчанию</p></li></ul><h2 id="meta" tabindex="-1">META <a class="header-anchor" href="#meta" aria-label="Permalink to &quot;META&quot;">​</a></h2><ul><li>Все страницы должны иметь корректные meta title, description</li></ul><h2 id="грязные-своиства" tabindex="-1">Грязные свойства <a class="header-anchor" href="#грязные-своиства" aria-label="Permalink to &quot;Грязные свойства&quot;">​</a></h2><ul><li>mix-blend-mode, will-change — использовать с осторожностью</li><li>z-index &gt; 100 — запрещено без причины</li><li>Не использовать inline styles в HTML</li></ul><h2 id="архитектурное-структурирование-стилеи-и-их-переопределяемость" tabindex="-1">Архитектурное структурирование стилей и их переопределяемость <a class="header-anchor" href="#архитектурное-структурирование-стилеи-и-их-переопределяемость" aria-label="Permalink to &quot;Архитектурное структурирование стилей и их переопределяемость&quot;">​</a></h2><ul><li>Каждый компонент содержит только свои стили</li><li>Стили переопределяемы через переменные / mixins</li><li>Используются глобальные утилиты и функции — нет дублирования</li><li>Не плодим одинаковые цвета, шрифты, размеры — всё в tokens</li></ul>',33)]))}const p=i(t,[["render",d]]);export{m as __pageData,p as default};
